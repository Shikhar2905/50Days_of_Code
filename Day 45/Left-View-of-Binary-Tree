

//User function Template for Java

/* A Binary Tree node
class Node
{
    int data;
    Node left, right;

    Node(int item)
    {
        data = item;
        left = right = null;
    }
}*/
class Tree
{
    int height(Node root){
        if(root == null)     return 0;
        return Math.max(height(root.left), height(root.right)) + 1;
    }
    
    
    // Method 1: Using PreOrder Traversal
    // Time : O(N)
    // Space : O(Depth of tree)
    void preOrder(Node root, int level, boolean levelVisited[], ArrayList<Integer> list){
        if(root == null) return;
        
        if(levelVisited[level] == false){   // First occurence of that level, from left view
            levelVisited[level] = true;
            list.add(root.data);
        }
        
        if( levelVisited[ levelVisited.length - 1 ] == true)   return;
        
        
        if(root.left != null)   preOrder(root.left, level + 1, levelVisited, list);
        if(root.right != null)   preOrder(root.right, level + 1, levelVisited, list);
    }
    
    
    // Method 2: Using Level Order Traversal
    // Time : O(N)
    // Space : O(Max nodes at a level)
    ArrayList<Integer> levelOrder(Node root){
        ArrayList<Integer> ans = new ArrayList<>();
         
        // if(root == null) return ans;
        
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        q.add(null);
        
        boolean newLevel = true;
        
        while(!q.isEmpty()){
            Node curr = q.remove();
            
            if(curr != null && newLevel == true){
                ans.add(curr.data);
                newLevel = false;
            }
            
            if(curr == null){
                if(!q.isEmpty()){
                    newLevel = true;
                    q.add(null);
                }
            }else{
                if(curr.left != null)   q.add(curr.left);
                if(curr.right != null)  q.add(curr.right);
            }
        }
        return ans;
    }
    
    
    ArrayList<Integer> leftView(Node root)
    {
        // Method 2     
        //return levelOrder(root);
      
        // Method 1
        ArrayList<Integer> list = new ArrayList<>();
        int height = height(root);
        boolean[] levelVisited = new boolean[height];
        for(int i=0 ; i<height ; i++){
            levelVisited[i] = false;
        }
        preOrder(root, 0, levelVisited, list);
        return list;
    }
}
