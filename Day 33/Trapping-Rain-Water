class Solution {
    public int trap(int[] height) {
        int n = height.length;

        // Calculate Left Max Boundary for each elemennt
        int leftBoundary[] = new int[n];
        leftBoundary[0] = height[0];
        for(int i = 1 ; i<n ; i++){
            leftBoundary[i] = Math.max(leftBoundary[i-1],height[i]);
        }

        // Calculate Right Max Boudary for each element
        int rightBoundary[] = new int[n];
        rightBoundary[n-1] = height[n-1];
        for(int i = n-2 ; i>=0 ; i--){
            rightBoundary[i] = Math.max(rightBoundary[i+1],height[i]);
        }

        int waterArea = 0;
        for(int i=0 ; i<n ; i++){
            int waterLevel = Math.min(leftBoundary[i],rightBoundary[i]);
            waterArea += waterLevel - height[i];
        }

        return waterArea;
    }
}
